name: CI/CD to Docker Hub + Minikube

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/go-docker-k8s

jobs:
  build-and-deploy:
    runs-on: self-hosted
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD_BASE64: ${{ secrets.DOCKER_PASSWORD_BASE64 }}
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/go-docker-k8s

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Build Go binary
        run: |
          $env:CGO_ENABLED="0"
          $env:GOOS="linux"
          $env:GOARCH="amd64"
          go build -o server .

      # - name: Test DOCKER_USERNAME is present
      #   run: |
      #     if ($env:DOCKER_USERNAME -eq $null -or $env:DOCKER_USERNAME -eq "") {
      #       Write-Host "DOCKER_USERNAME is missing or empty!"
      #       exit 1
      #     } else {
      #       Write-Host "DOCKER_USERNAME is set and non-empty: [$($env:DOCKER_USERNAME)]"
      #     }

      # - name: Debug Decoded Password Length
      #   run: |
      #     $password = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($env:DOCKER_PASSWORD_BASE64))
      #     Write-Host "Decoded password length: $($password.Length)"
      #     if ($password -eq $null -or $password -eq "") {
      #       Write-Host "Decoded password is EMPTY!"
      #       exit 1
      #     }

      # - name: Debug Docker Username
      #   run: |
      #     Write-Host "DOCKER_USERNAME: [$env:DOCKER_USERNAME]"

      - name: Docker login (Windows fix)
        run: |
          $password = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($env:DOCKER_PASSWORD_BASE64))
          docker login -u $env:DOCKER_USERNAME -p $password

      - name: Build and push Docker image
        run: |
          $tag = "$env:IMAGE_NAME" + ":0.0.1"
          docker build -t $tag .
          docker push $tag

      - name: Deploy to Minikube
        run: |
          kubectl apply -f k8s/Deployment.yaml
          kubectl apply -f k8s/Service.yaml
          kubectl rollout status deployment/go-docker-k8s -n dev

      - name: Force rollout restart
        run: kubectl rollout restart deployment/go-docker-k8s -n dev
      
      # - name: Show minikube tunnel URL
      #   run: minikube service go-docker-k8s-service -n dev --url

